
================================================================
1. ReactJs JS Intro & Workspace Setup
================================================================
Series: https://www.youtube.com/watch?v=MhkGQAoc7bc&list=PLoYCgNOIyGABj2GQSlDRjgvXtqfDxKm5b
GitHub: https://github.com/learncodeacademy/react-js-tutorials



*****************************************
Video 01: ReactJS Intro & Workspace Setup
*****************************************
https://youtu.be/MhkGQAoc7bc
----------------------------------------
About
----------------------------------------
REACT changes way you think...
Concepts introduced to creating stable web apps.
Prerequisites:
	ES6
	WebPack
.
	
----------------------------------------
Info
----------------------------------------
Got files from github...
	webpack
	webpack --watch
		as we save, client.min.js gets updated
React basics/methodology
	* "AS everything is an element in HTML," 
	* "everything is a component in React"
	* "rendering engine is Separate from react syntax!"
	import
		import React from "react";
			can render to many things
		import ReactDOM from "react-dom";
			*! rendering engine to dom aka our active webPage
	Creating Component Structure
		class file extends React Component
		need render method in component	
			render(){return (//JSX here); }
		if ever want to render a component...
			use it as if an html tag
			ReactDOM.render(<Layout/>, app); //forward-slash necessary? 
				renders `Layout` component in app div
//OLD
var div = document.createElement("div");
div.innerHTML = "some content";
//NEW
	//Where Layout is a class component.
const app = document.getElementById('app');
ReactDOM.render(<Layout/>, app);

Live reloading
	some IDEs have this, 
	but `webpack-dev-server` may be better 
		so page rendered from webpack output file directly.

global to local with npm's run scripts.
//OLD
	`npm install -g webpack-dev-server`
	`webpack-dev-server` etc...
//NEW
	`npm install -D webpack-dev-server` OR `npm install -S webpack-dev-server`
	inside package.json's... 'scipts': {"subCommand": "cmdLn"} 
		apply something similar as below:
		"./node_modules/.bin/webpack-dev-server" -flagsIfNeeded
.

*****************************************
Video 02: Reactjs Components & Rendering
*****************************************
https://youtu.be/fd2Cayhez58
----------------------------------------
About
----------------------------------------
Should be set up.
Everything in REACT is a component.
*Components return exactly one DOM element.
	like HTML, everything must have one parent DOM element.	

-----------------------------
1 DOM Element + more via div
-----------------------------
class Layout extends React Component {
	render(){
		return (
			<div>//CORRECT 
				<h1>It is working!</h1>
				//<h1>It is working!</h1> //INCORRECT //if placed another element here, would error out.
				<h1>It is working!</h1>
			</div>
		);
	}//render
}//Layout Component
//render component into app div.
const app = document.getElementById("app");
ReactDOM.render(<Layout/>, app);

-----------------------------
Dynamic
-----------------------------
class Layout extends React Component {
		//Best to place logic outside render!
	constructor (){
		super();
		this.name1 = "will";
	}
	
	getVal(){
		return "James";
	}
	
	render(){
		const name = "Will";
			//Place logic outside return!
		return (
				<h1>{this.getVal()}, it is working for { name } and {this.name1}!</h1>
			</div>
		);
	}//render
}//Layout Component
//render component into app div.
const app = document.getElementById("app");
ReactDOM.render(<Layout/>, app);


	
*****************************************
Video 03: Composing Multiple React.js Components
*****************************************
https://youtu.be/vu_rIMPROoQ
----------------------------------------
About
----------------------------------------
Move out of single component
Move into entire Layout made of React components

----------------------------------------
Design
----------------------------------------
`client.js`
	import React from "react";
	import ReactDOM from "react-dom";
	
	//The overall component.
	import Layout from "./components/Layout";

	const app = document.getElementById('app');
	ReactDOM.render(<Layout/>, app);
//Keep component in its own folder

`Layout.js`
	import React from "react.js"
	import Footer from "Footer.js";
	import Header from "Header.js";

	export default class Layout extends React Component {
		constructor(){
			super();
			this.name = "Will";
			this.list = [
				<li>,
				<li>,
				<li>,
			];
			
		}//constructor
		
		render(){
			var attribute = "cool";
			return (
				<div>
					<Header />
					<ul>This is {this.name}'s unordered {attribute} list.
						{this.list}
					</ul>
					<Footer />
				</div>
			);
		}//render		
		
	}//class - Layout
//I coudn't create a variable in the class itself and called within render's return.
//2 places I can are: class's constructor & render().
//Keep imports alphabetized for easy lookup.

`Header.js` & ~Footer.js
import React from "react";
export default class Header extends React Component {
	render(){
		return (
			<footer>footer</footer>
		);
	}
}
//above is just a display for the above's imports of Header&Footer
................................................
----------------------------------------
Summary
----------------------------------------
To avoid getting messy in the main js file, the main js file only job may be to render the main component.
The main component can have the overall set up the other components.
Break down all the components to the smallest possible.
A component may use the other components by 
	importing.
	Using tag via class name. Similar to XML custom tag defining.
Next time...
	Passing values into components--many ways.
		-One was covered, but not explained in video 3 via using class components and JSX.
		-more?...



*****************************************
Video 04: State vs Props & Application Data
*****************************************
https://youtu.be/qh3dYM6Keuw
----------------------------------------
About
----------------------------------------
* How Data is managed in React.
1st great feature of react.

2 ways data gets handled.
1. state
2. props
3. context - but, this is an advanced feature. Also, API is not stablalize guaranteed. 

----------------------------------------
State
----------------------------------------
this.state = null; //by default.
*Manages a VIRTUAL DOM
	-when state changes on a component, component will re-render.
	-doesn't touch DOM until Virtual DOM is.
	-whenever React renders component tree, it looks for changes in Virtual DOM to actual DOM.
*WHY IS IT GREAT!
	-JavaScript is fast, DOM is slow. 
	-Whenever, need to update DOM, that is the slowest part.
	-my tidbit: this is similar to what is said about JQuery, and you had to manually be wary of not editing DOM when there was no need to.
		-kinda like Java String Builder, no changes or objects/strings/etc made until it is finalized.
WHAT IS REACT DOING BEHIND SCENES.
	*On Chrome's console, click `escape` key for rendering options.
		-enable paint flashing
			this helps to see which parts of DOM changes.
	React manages DOM
	//OLD Qs
		When should I update DOM?
		When I do, who should? - list component or each list item render itself.
	//New Solution
		Re-render everything, all the time, on any change, but only in JS, only touch DOM if something changed visually.
MENTALLITY of STATE
	state only gets used, if component has an internal value that only affects that component.
		When to use?
			If you have something that only affects a certain component
		Otherwise used props.
.

//in a class component's constructor
constructor (){
	super();
	this.state = {name: "Will"};
}
render(){
	setTimeout( () => {
		//say user fired some action, this action.
		this.setState({name: "Bob"});
	}, 1000);
	return(){
		<div>
			{this.state.name}
		</div>
	}
}
	
----------------------------------------
Props *more popular.
----------------------------------------
this.props.[]
* props are injected into every other components.
They are basically the attributes of an element
As props are to that of a Component.

`Layout.js` with prop
	import React from "react";

	import Footer from "./Footer";
	import Footer from "./Header";

	export default class Layout extends React Component {
		render(){
			const title = "Welcome Will!";
			return(){
				<div>
					<Header name={"Thing1"} title={title} />
					<Header name={"Thing2"} title={title} />
				</div>
			}
		}
	}
//notice how props were inject with curly braces as a variable and a value.
//Can create another component and insert props, change values, etc.
	//Acts like an XML of JavaScript in JSON for states and is customizable constructor-like, but not really.
.

`Header.js` designed with above
	import React from "react";

	//importing other components
	import Footer from "./Header/Title";

	export default class Header extends React Component {
		render(){
			//console.log(this.props);
			return(){
				<div>
					<Title title={this.props.title} /> //!!!
					
				</div>
			}
		}
	}//Component
//notice title props in Title component tag.
//it act as if it is waiting if a title prop, in props, was passed via a call of the component in another component. Doesn't know what props are going to be passed.
//Acts more like C++'s variable passing hierarchy where the 3rd class, extending a 2nd class that extends the 1st class, needs to pass a value to the 2nd class that will capture that variable (not value) and pass it into 1st class's variable.
[class 1] var1 = 1
[class 2] var2 = var1
[class 3] var3 = var2
.
`Title.js` designed with above
	import React from "react";

	export default class Title extends React Component {
		render(){
			//console.log(this.props);
			return(){
				<div>
					<h1>title={this.props.title} </h1> //!!!
				</div>
			}
		}
	}//Component
.
//Basically "transparently" passing value through.
.
.
.
----------------------------------------
Mixing Props and States
----------------------------------------
`Layout.js`
	import React from "react";

	import Footer from "./Footer";
	import Footer from "./Header";

	export default class Layout extends React Component {
		constructor (){
			super();
			this.state = {
				title: "Nice to meet you."
			};
		}
		render(){
			const title2 = "Welcome Will!";
			setTimeout( () => {
				this.setState({title: "Welcome Will!"});
			}, 2000);
			return(){
				<div>
					<Header name={"Thing1"} title={this.state.title} />
					<Header name={"Thing2"} title={title2} />
				</div>
			}
		}
	}
.
//WHAT HAPPENED W/ MIX?
	Did what was expected.
		It showed components and the change after 2 sec. ~ to state prob.
//WHAT GOT UPDATE?
	Only header component changed.
	Though variable passed to Layout, change occurred in Header's div. To be more precise, the Title component itself lying within Header.
.
.
.................................
`Header.js`
	import React from "react";

	//importing other components
	import Footer from "./Header/Title";

	export default class Header extends React Component {
		render(){
			//console.log(this.props);
			return(){
				<div>
					<Title title={this.props.title} /> //!!!
					
				</div>
			}
		}
	}//Component
.
.
.................................
`Title.js` designed with above
	import React from "react";

	export default class Title extends React Component {
		render(){
			//console.log(this.props);
			return(){
				<div>
					<h1>title={this.props.title} </h1> //!!!
				</div>
			}
		}
	}//Component
.

----------------------------------------
Summary
----------------------------------------
**look in 'About'

	
*****************************************
Video 05: Events & Data Changes in React
*****************************************
https://youtu.be/_D1JGNidMr4
----------------------------------------
About
----------------------------------------
binding events
interacting with User input
Changing data real-time
	
----------------------------------------
input
----------------------------------------
.
//As input header gets typed, will want to trigger an event in layout to update the layout's state.
.
.
...........................
`Layout.js`
import React from "react";

import Footer from "./Footer";
import Footer from "./Header";

export default class Layout extends React Component {
	constructor (){
		super();
		this.state = {
			title: "Welcome",
		};
	}
	
	//!!!
	changeTitle(title){
		this.setState({ title });		
	}
	
	render(){
		const title2 = "Howdy Yall!";
		return(){
			<div>
				<Header name={"Thing1"} changeTitle={this.changeTitle.bind(this)} title={this.state.title} />
				
				<Header name={"Thing2"} title={title2} />
			</div>
		}
	}
}
.
//VERY IMPORTANT:
	When passing around methods, ALWAYS bind them to 'this'.
	If don't do `.bind(this)`, will execute in context to whoever is calling it.
		my tidbit: existence critical override.
		ex: 
			in Header, if did this: this.props.changeTitle();
			It is like calling the method in Header, which may/may not exist, and executing it.
			this.setState({ title }), is ran and is silent failure. Like what happens with 'use strict'.
.
.
...............................
Edit `Header.js` w/ variation

handleChange(e){
	const title = e.target.value;
	this.props.changeTitle(title);
}
render(){
	return(){
		<div>
			//<h1>title={this.props.title} </h1>
			<Title title={this.props.title}> </Title>
			<input onChange={this.handleChange.bind(this)} />
		</div>
	}
}
.
//added input and an onChange prop to input
//handleChange receives an event like normal
//events: onChange, onClick, onBlur
//!! on event, fires this into the function be called to handle.
//*!! if you are writing in an input and nothing happens on screen , like characters not showing. Might mean you need to check if even prop has been included.
.
.
.
.................................
`Title.js` is the same...
import React from "react";

export default class Title extends React Component {
	render(){
		return(){
			<div>
				<h1>title={this.props.title} </h1> //!!!
			</div>
		}
	}
}//Component
.
.
----------------------------------------
Summary
----------------------------------------
.
.
.
*****************************************
Video 06: React Router & Intro to Single Page Apps with React 
*****************************************
https://youtu.be/1iAG6h9ff5s
GitHub: I think this is when second folder is finally used. "2-react-router"
----------------------------------------
About
----------------------------------------
-single page apps.
-try not leave people behind.
-not too slow/beginner for those experienced with Angular, Backbone, Ember, [other single page application frameworks] etc.
	
----------------------------------------
Info from presenter
----------------------------------------
Single page application:: navigate + everything else, without leaving page.
Wanted more then boring HTML, so went to 
	*Bootstrap.com
		got basic theme.
	*stripped out jquery
	*Bootswatch for a different CSS theme.
	Bootstrap WithoutJQuery.js GitHub repository.
		lightweight script to replace JQuery. 
		for simple things like, drop downs, hamburger icons, etc.
Result: 
	an long html page designed for certain purpose.
	still has everything from last folder (videos [1-5])
		bootstrap
		client.min.js
		div id="app"
Files
`client.js`
	mostly the same. 
		loading layout, binding app, and rendering it.
	new
		loading Bootstrap without js.
Routing:: 
	This is where when you click on buttons, can route to different pages/states of the application wo/leaving the page via JS.
IMPORTANT UPDATE ON INFO:
	Recap:
		>>npm run script to {"dev": "./node_modules/bin/webpack-dev-server"}
	Can do:
		without calling within node_modules in place of global installation.
		>>npm run script to {"dev": "webpack-dev-server"}
			Why?
				automatically adds "./node_modules/.bin/"<path>
	What I know:
		If i remember right and if for the same reason, 
			a command within the directory can search in tree of node_modules, node_modules inside node_modules inside etc.
.
----------------------------------------
Steps
----------------------------------------
//! not covered, just follow the vid....
Will be converting static HTML to dynamic.
	KillerNews.net was the only dynamic bit.
01. Set up Routing
02. 
.
.
----------------------------------------

----------------------------------------



----------------------------------------

----------------------------------------



*****************************************
Video 07: 
*****************************************


----------------------------------------

----------------------------------------


	
----------------------------------------

----------------------------------------


	
*****************************************
Video 08: 
*****************************************


----------------------------------------

----------------------------------------


	
----------------------------------------

----------------------------------------


	
*****************************************
Video 09: 
*****************************************


----------------------------------------

----------------------------------------


	
----------------------------------------

----------------------------------------


	
*****************************************
Video 10: 
*****************************************


----------------------------------------

----------------------------------------


	
----------------------------------------

----------------------------------------


	
*****************************************
Video 11: 
*****************************************


----------------------------------------

----------------------------------------


	
----------------------------------------

----------------------------------------


	
*****************************************
Video 12: 
*****************************************


----------------------------------------

----------------------------------------


	
----------------------------------------

----------------------------------------


	
*****************************************
Video 13: 
*****************************************


----------------------------------------

----------------------------------------


	
----------------------------------------

----------------------------------------


	
*****************************************
Video 14: 
*****************************************


----------------------------------------

----------------------------------------


	
----------------------------------------

----------------------------------------


	
*****************************************
Video 15: 
*****************************************


----------------------------------------

----------------------------------------


	
----------------------------------------

----------------------------------------


	
*****************************************
Video 16: 
*****************************************


----------------------------------------

----------------------------------------


	
----------------------------------------

----------------------------------------


	
*****************************************
Video 17: 
*****************************************


----------------------------------------

----------------------------------------


	
----------------------------------------

----------------------------------------


	
*****************************************
Video 18: 
*****************************************


----------------------------------------

----------------------------------------


	
----------------------------------------

----------------------------------------


	
*****************************************
Video 19: 
*****************************************


----------------------------------------

----------------------------------------


	
----------------------------------------

----------------------------------------


	
*****************************************
Video 20: 
*****************************************


----------------------------------------

----------------------------------------


	
----------------------------------------

----------------------------------------


	
*****************************************
Video 21: 
*****************************************


----------------------------------------

----------------------------------------


	
----------------------------------------

----------------------------------------


	
*****************************************
Video 22: 
*****************************************


----------------------------------------

----------------------------------------


	
----------------------------------------

----------------------------------------


	
*****************************************
Video 23: 
*****************************************



----------------------------------------

----------------------------------------


	
----------------------------------------

----------------------------------------


	



==========================================

==========================================



==========================================

==========================================








