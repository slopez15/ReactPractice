===================================================
0. Pre-Material
===================================================
To know before starting...
a. ES6
b. Webpack
========================================================================
a1. ES6 - Part 1: https://youtu.be/AfWYO8t7ed4
https://www.youtube.com/watch?v=AfWYO8t7ed4&index=1&list=PLoYCgNOIyGACDQLaThEEKBAlgs4OIUGif
========================================================================
How to write es6 while having es5 safe in browsers?
	Use bablejs.io <-*
	traceur
--------------------------------------
Features
--------------------------------------
//destructuring - think of it as passing vals to object vars like in constructors
var foo = {
	bar: 1, 
	baz: 2
};
--------------------------------------
// EXAMPLE 1
--------------------------------------
//instead of this
	var bar = foo.bar;
	var baz = foo.baz;
//do this
	var { bar, baz } = foo; 
//snatch a variable/value and create a local version of it.
--------------------------------------
// EXAMPLE 2
--------------------------------------
	var tenses = ["me", "you", "he"];
	var [ firstPerson, secondPerson ] = tenses;
	//tip: spaces on left side to notify destructuring vs. creating an array.
--------------------------------------
Where useful?
--------------------------------------
Promise.all( [promise1, promise1] ).then( function(results) {
	var [ results1 ] = results;
});
//OR destructure within function parameter
Promise.all( [promise1, promise1] ).then( function( [ results1, results2 ] ) {
	//can call results1 & results2 since destructured locally within function
});
//many new features not new, but makes things better. 
	//CoffeeScript tried to do this, but became too much of its own language.
--------------------------------------
destructure injection
--------------------------------------
//insert into obj
var foo = 2;
var obj = {
	bar: 1, 
	foo, //insert value with it since it exists.
};
//insert into method
var name = "Will";
var age = 34; 
some.method({ name, age });
	//basically made this
	{
		name: name, 
		age: age
	}
----------------------------------------
w/ bracket notation inside object.
----------------------------------------
var name = "Will";
obj = {
	["name" + name]: "someValue";
};
//instead of
obj = {};
obj["name"+name]: "someValue";

----------------------------------------
Destructuring Arguments
----------------------------------------
function calcBMI (weight, height, max, callback){
	var bmi = weight / Math.pow(height, 2);
	if (bmi > max) {
		console.log("Weight is too high. You are overweight.");
	}
	if (callback) {
		callback(bmi);
		
	}
}
//the call
calcBMI(weight, height);
calcBMI(weight, height, function() {} );
//have to edit parameter again! due to changes in function and may not use them all....
calcBMI(weight, height, 25);
calcBMI(weight, height, null, function() {} );

//Problem: parameters are rigid and need to change a lot.
//Solution: 
	//older solution: PASS as an OBJect.
		function calcBMI (opts){//see below}; //you would reference vars that may/not be there via if (opts.var)
	//newer solution: DESCTRUCTURE object COMING IN!
		function calcBMI ( { weight, height, max = 25, callback } ){ //DEFAULT ARGUMENTS allowed! //NO ORDER REQUIRED! //CAN CHANGE NAMING
			var bmi = weight / Math.pow(height, 2);
			if (bmi > max) {
				console.log("Weight is too high. You are overweight.");
			}
			if (callback) {
				callback(bmi);
				
			}
		}
calcBMI({ weight, height, max: 25 });
calcBMI({ weight, height, callback: function() {} ); //can pass as undefined and function's default values will take care of it.
-------------------------------
no order required example
-------------------------------
calcBMI ( { height, max = 25, weight, callback } ){//see above} //notice parameter order differs above

-------------------------------
Name Changing example
-------------------------------
calcBMI ( { height: h, max = 25, weight: w, callback } ){//notice colon renaming vs equals sign default val assignment above


----------------------------------------
Template Strings
----------------------------------------
//OLD WAY. 
	//If need to change 1 part of a string into a variable from static word.
	//ex: J, once part of phrase, now needs to be interchangeable. Thus, add a var.
var name = "James";
var nickName = "";
FROM: 
	var greet = "Hello, my name is " + name + ", but you can call me J.";
TO: 
	var greet = "Hello, my name is " + name + ", but you can call me " + nickName + ".";
	//there is also muli-line separation for visual purposes.
var greet = "Hello, my name is \n" + 
			name + ", but you can call me \n" + 
			nickName + ".";

//NEW WAY
var greet = `Hello, my name is ${name}, but you can call me ${nickName}.`;
	//multi-line. Just by making new lines?
var greet = `Hello, my name is ${name}, 
			but you can call me 
			${nickName}.`;
			
========================================================================
a2. ES6 - Part 2: https://youtu.be/LmL0Gh193M0
https://www.youtube.com/watch?v=LmL0Gh193M0&list=PLoYCgNOIyGACDQLaThEEKBAlgs4OIUGif&index=2
========================================================================

----------------------------------------
Block Scoping
----------------------------------------
//not appreciate, but more use, more appreciation.
------------------
function scoping
------------------
var a = 1;
function (){
	var b = 2;
}
console.log(b);
------------------
block scoping
------------------
//Hoisting b, because it is a var. To not hoist, use let.
	var a = 1;
	if (true) {
		var b = 2;
	}
	console.log(b); //will now console log. 2.
//the same as below...
	var a = 1;
	var b;
	if (true) {
		b = 2;
	}
	console.log(b); //will now console log. 2.
//No Hoisting
	var a = 1;
	if (true) {
		let b = 2;
	}
	console.log(b); //NO console log.
//local instance for each loop
	var a = 1;
	for (20) {
		let b = 2; //looping 20 times. Each time, create a new b variable that is new for that loop, then destroyed at the end of that loop.
	}
	console.log(b); //NO console log.
/* Summary
let is the new var. 
never need var, unless for some strange reason where...
	need to define a variable within a block and accessable to outside of block.
However, correct way to define outside and reassign inside block if needed -- correct way to code.
//correct
	var a; 
	if (true){
		a = 20;
	}
//incorrect
	if (true){
		var a = 20;
	}
*/
------------------
const variable
------------------
//also block scoped.
//cannot be overwritten. like final in Java.
	//Cannot change object!, but can change contents of the object.
//incorrect
	const a = 1;
	a = 2;
//valid
	const bar = {a: 1};
	bar.a = 2;
/*TIP: 
	mutating a value... is something you usually don't want to do. 
	think of using a METHOD instead.
	const is PREFERRED.
	Start with const, then if needed, use let.
*/

------------------
classes!
------------------
//BEFORE - similar to how C++ had to add methods via Scope Resolution Operator (::).
	//however, JavaScript used prototype and constructor kinda acted as the class too.
function Parent (){
	//const
}
Parent.prototype.foo = function (){}
Parent.prototype.bar = function (){}

//AFTER/NEW in ES6
class Parent {
	constructor(){
		//stuff
	}
	foo (){
		//stuff
	}
	bar (){
		//stuff
	}
}

var parent = new Parent ();
parent.foo();


//AFTER/NEW in ES7 has this static class properties
class Parent {
	age = 34; //<-- static attribute
	constructor(){
		//stuff
	}
	static foo (){ //<--
		//stuff
	}
	bar (){
		//stuff
	}
}
class Child {
	constructor (){
		super();
	}
	baz(){
		//stuff
	}
}
var parent = new Parent ();
parent.age;//34
Parent.foo(); //static call to class's method, not an object's method //instead of parent.foo();
var child = new Child ();
child.baz();
child.foo(); //incorrect
child.bar();

---------------------------------------------------------------
ARROW functions
---------------------------------------------------------------
//May/not cover all ways on how to create a function.
//method 1: function method. Official name is __.
function foo (a, b){
	return a+b;
} //don't know if semi-colon needed.
//method 2: var equal to function. Official name is __.
var foo = function (a, b){
	return a+b;
};
//NEW method 3: arrow 
var foo = (a, b) => {
	return a+b;
}

//may not seem much, but found helpful.
----------------------------------------------------
//when passing functions as arguments like callbacks
----------------------------------------------------
	//OLD
	do.something (function (a, b) {
		return a+b;
	});	
	//NEW "arrow" continued
	do.something( (a, b) => {
		return a+b;
	});
	//NEW "clean one line" bracket and semi-colon drop.
	do.something( (a, b) => {return a+b;} );
	//NEW "implicit returns" - one liners only. what is on right side gets automatically returns.
	do.something( (a, b) => a+b );
	//NEW "implicit returns" - one liners only. Also, if one argument, can drop parenthesis.
	do.something( a => a++ );
ex:
	[0, 1, 2].map(val => val++); //[1, 2, 3]	
//GREAT for underscore.js methods; mapping, filtering, sorting...

----------------------------------------------------
LEXICAL BINDING - Automatically binds context to arrow functions.
----------------------------------------------------
If creating a function and want to bind to arrow functions
var module = {
	age: 30, 
	foo: function () {
		console.log(this.age);
	},
	bar: function (){
		setTimeout(function (){
			console.log(this.age);
		}.bind(this), 100);
	},
	baz: function (){
		setTimeout( () => {
			console.log(this.age);
		}), 100;
	}
}
module.foo(); //30
module.bar(); //before couldn't access and needed to bind vars ex:".bind(this)" callbacks within the methods being called in the function; to have access to attributes outside the method.
module.baz(); //cleaner way; automatically binds `this` with arrow functions and points to reference module object, the context in which you are in.
------------------
WHY IMPORTANT?!?
------------------
$("something").with().JQuery( () => {
	$(this) //cannot do this anymore
});
//you have OVERRIDEN JQuery's value of this into the context that it is in.
//normally JQuery sets value of $(this) to be event handler. OR
//if using event binder, the event listener

//TIP: USE `function` instead when using JQuery.
$("something").with().JQuery( function () {
	$(this) //cannot do this anymore
});
//this is preferred since you need JQUERY's this value OR DOM event listener.

-------------------------
GENERATOR functions
-------------------------
* new large power and especially to async
* complicated 1st time around
* covered separately.
generators: https://www.youtube.com/watch?annotation_id=annotation_15064051&feature=iv&src_vid=LmL0Gh193M0&v=QO07THdLWQo

----------------------------------------------------
ES6 Modules
----------------------------------------------------
Module Systems; require. 
//File 2 - "myModule.js"
module.exports.foo = function () {
	//stuff
};
module.exports.bar = function () {
	//stuff
};
module.exports = function () { //just replace module.exports with a function itself.
	//stuff
};
//ES6 modules
export default function(){
	//stuff
}
export function foo(){
	//stuff
}
//to import these later, in another file.

//OLD: REQUIRE METHOD
//File 1 - "someName.js"
	var myModule = require("myModule"); 
	var foo = myModule.foo;
	var bar = myModule.bar; //?Notice there is no parenthesis `()`
//same as..
	var foo = function () {//stuff}; //where function is from myModule.foo
	var bar = function () {//stuff};
//NEW: IMPORT METHOD
	import myModule from "myModule"; //must be on top.
	var foo = myModule.foo;
//Destructure it.. obtain exported variables...
	import { foo, bar } from "myModule"; //must be on top.
	var foo = myModule.foo;
	//This destructuralized import method is REAALLLL nice for lodash..
//AS
	import { foo as fool, bar } from "myModule";


-------------------------
ASync Functions
-------------------------
//can do this especially if using Babel.js to transpile.
async function () {
	var friends = await $.get("https://someSite.com/friends");
	console.log(friends);
}
//basically a generator function, helps convert into a generator function.
	//that returns a `Promise` and can add .then(). "then-able"
//anywhere inside, instead of yield, you can await.
//this helps write code as though you already received it.



--------------------------------------------------
GENERATOR functions
--------------------------------------------------
* new large power and especially to async
* complicated 1st time around
* covered separately.
generators: https://youtu.be/QO07THdLWQo

-------------------------
covering GENERATORS
-------------------------
//most powerful feature of ES6 "Harmony"
//Can use now with Google "Traceur"

//defined by a `*` star after `function`
//is a "pause-able" / iterable function
var myGen = function* {
	var one = yield 1;
	var two = yield 2;
	var three = yield 3;
	console.log(one, two, three); 
		//undefined, undefined, undefined; //"not 1", 4, 3
};

var gen = myGen (); //get the generator ready to run.

console.log(gen.next()); //{value:1, done: false}
console.log(gen.next("not 1")); //{value:2, done: false} //though 1 was yielded previously, may pass a value to overwrite first yield from undefined.
console.log(gen.next(4)); //{value:3, done: false}
console.log(gen.next(3)); //{value:undefined, done: true}
console.log(gen.next()); //errors because you can't call `next()` on a closed generator
//once program gets to `yield`, will stop running the function; while running other functions.
//yield adverb sits after equal sign and before the value.
/* How it works
when you create the object nothing occurs until you call gen`.next()`
it will run the function until complete, unless the program is to `yield`
	should return the value which was yielded and a `done` boolean indicator with false.
you must call gen`.next()`, until the function completed.
	when it is complete, it will return an undefined value and a `done` boolean indicator with true. 
If call gen`.next()` again, even after it finished, 
	it will error cause the generator is closed; you cannot call gen`.next()`
*/
//To be continued....
Generators: https://youtu.be/QO07THdLWQo?t=3m56s
//cover promises before continuing...
Promises: https://youtu.be/obaSQBBWZLk



========================================================================
b. WebPack
========================================================================
//Video from user1: https://youtu.be/9kJVYpOqcVU
----------------------------------------
Tidbits about react
----------------------------------------
great tech getting in 2015-2016
Great for new developers and experienced developers
a bit of a learning curve for both. 
Video here about module loaders, mostly for new developers.
WebPack is module loader of choice for React community. 

----------------------------------------
Module Loaders
----------------------------------------
3 module loaders - kinda out there.
1. require.js
2. Browserfy
3. Webpack - pick this if doing React; feature-full required in some ways. 
As of Jan 2016, 2&3 are challenging each other.

//OLD METHOD
	//1. scripts.js file w/ all modules.
	//2. load external `script.js`
		//<script src="js/script.js"></script>
	//3. if too big, would...
		//a. break modules apart and place in individual `script`.js files; thus multiple requests.
		//b. some would build `script.js` that would concatenate all modules into one file and minify.
		//^MODULE LOADER BUILD SYSTEM.
			//Worth it for large systems.
			//Can now code all modules separately and have entry point at script.js; "module path dependency"
			//lets say there is an order that modules must be fired/executed. 
				//you just require/import them in the order they must be requested.
require("./module1.js");
require("./module2.js");
	//Browser JavaScript. Above will not work, cause it is commonJS module/code system that nodeJS uses. 
	//Need, nodeJS to convert above into browser worthy format.	
//NEW METHOD
Use a MODULE LOADER

Steps from the video:
1. `npm init`
2. `npm install -S webpack`
3. `npm install -g webpack` //to run the command
4. need/create a webpack.config.js file. 
	contents below and example file link: https://gist.github.com/learncodeacademy/25092d8f1daf5e4a6fd3
	tells webpack where to look and how to act
5. `webpack`
	it created scripts.min.js
		is not minified, cause didn't run `webpack` w/ `process.env.NODE_ENV = "production"`
		source mappings
		brought module definitions
		extra code added. Seems a lot for two console logs, but 
			once get a whole application, 
				this make code much simpler/cleaner.
6. `NODE_ENV = production webpack`
	scripts.min.js is minified
7. `webpack`
8. change external JavaScript link in html file 
	from: <script src="js/script.js"></script>
	to: <script src="js/script.min.js"></script>
9. `open index.html`
10. open browser console
	NOTICE: modules are inside.
11. go back to console log
12. `npm install -S jquery`
13. `npm install -S lodash`
14. Lets say...
	module1 = a jquery module //write jquery here
	module2 = a lodash module //write lodash here
15. `webpack` & refresh page
	jquery
		*see module1.js example below
		should say newText
		NOTICE: jquery not loaded inside global scope of page, like step 10. 
			jquery only exists, where jquery needs to exist; in the module
			if another module needed to require jquery, is ok, code won't be duplicated 
				due to webpack
				creates a module called jquery and assures it has been loaded in proper order.
	lodash
		*see module2.js example below
		mockaroo.com
			a. make 20 rows of random JSON data. 
			b. click preview
		paste data into people.
		use lodash methods with deconstruction
16. Go back to step 14, but same for lodash.


--------------------------------
module1.js
--------------------------------
var $ = require("jquery");
$('h1').html("newText");

--------------------------------
module2.js
--------------------------------
var _ = require("lodash");
$('h1').html("newText");
var people = [{
  "id": 1,
  "first_name": "Gifford",
  "last_name": "Daid",
  "email": "gdaid0@yahoo.com",
  "gender": "Male",
  "ip_address": "50.24.180.154"
}, {
  "id": 2,
  "first_name": "Tove",
  "last_name": "Verriour",
  "email": "tverriour1@twitpic.com",
  "gender": "Female",
  "ip_address": "81.51.130.41"
}, {
  "id": 3,
  "first_name": "Aloisia",
  "last_name": "Lindner",
  "email": "alindner2@instagram.com",
  "gender": "Female",
  "ip_address": "108.166.130.204"
}, {
  "id": 4,
  "first_name": "Fernanda",
  "last_name": "Parkeson",
  "email": "fparkeson3@joomla.org",
  "gender": "Female",
  "ip_address": "183.61.180.181"
}, {
  "id": 5,
  "first_name": "Binny",
  "last_name": "Jorcke",
  "email": "bjorcke4@ocn.ne.jp",
  "gender": "Female",
  "ip_address": "46.153.237.105"
}, {
  "id": 6,
  "first_name": "Saudra",
  "last_name": "Tilford",
  "email": "stilford5@hexun.com",
  "gender": "Female",
  "ip_address": "221.6.190.220"
}, {
  "id": 7,
  "first_name": "Janelle",
  "last_name": "Parnall",
  "email": "jparnall6@nbcnews.com",
  "gender": "Female",
  "ip_address": "170.142.221.38"
}, {
  "id": 8,
  "first_name": "Orrin",
  "last_name": "Boays",
  "email": "oboays7@feedburner.com",
  "gender": "Male",
  "ip_address": "70.37.52.164"
}, {
  "id": 9,
  "first_name": "Kahaleel",
  "last_name": "Evison",
  "email": "kevison8@sohu.com",
  "gender": "Male",
  "ip_address": "170.211.48.195"
}, {
  "id": 10,
  "first_name": "Genny",
  "last_name": "Foster-Smith",
  "email": "gfostersmith9@ihg.com",
  "gender": "Female",
  "ip_address": "253.13.86.38"
}, {
  "id": 11,
  "first_name": "Mose",
  "last_name": "Stopford",
  "email": "mstopforda@cnet.com",
  "gender": "Male",
  "ip_address": "195.156.138.120"
}, {
  "id": 12,
  "first_name": "Merwyn",
  "last_name": "Potter",
  "email": "mpotterb@printfriendly.com",
  "gender": "Male",
  "ip_address": "15.106.57.2"
}, {
  "id": 13,
  "first_name": "Tammie",
  "last_name": "Tuxell",
  "email": "ttuxellc@cnbc.com",
  "gender": "Female",
  "ip_address": "230.24.82.57"
}, {
  "id": 14,
  "first_name": "Davon",
  "last_name": "Feltham",
  "email": "dfelthamd@cbc.ca",
  "gender": "Male",
  "ip_address": "227.60.231.255"
}, {
  "id": 15,
  "first_name": "Brittan",
  "last_name": "McTaggart",
  "email": "bmctaggarte@tripod.com",
  "gender": "Female",
  "ip_address": "122.222.181.121"
}, {
  "id": 16,
  "first_name": "Benni",
  "last_name": "Satterley",
  "email": "bsatterleyf@blogspot.com",
  "gender": "Female",
  "ip_address": "23.71.142.227"
}, {
  "id": 17,
  "first_name": "Britte",
  "last_name": "MacKeeg",
  "email": "bmackeegg@163.com",
  "gender": "Female",
  "ip_address": "30.37.71.58"
}, {
  "id": 18,
  "first_name": "Rickey",
  "last_name": "Tolefree",
  "email": "rtolefreeh@wikimedia.org",
  "gender": "Male",
  "ip_address": "111.80.33.116"
}, {
  "id": 19,
  "first_name": "Carlyle",
  "last_name": "Luckman",
  "email": "cluckmani@github.io",
  "gender": "Male",
  "ip_address": "215.10.65.198"
}, {
  "id": 20,
  "first_name": "Melvin",
  "last_name": "Ridgeway",
  "email": "mridgewayj@ifeng.com",
  "gender": "Male",
  "ip_address": "11.73.140.99"
}];

var femaleCount = _.filter(people, { gender: "Female" }).length;
alert(femaleCount + "females!")


--------------------------------
webpack.config.js file
--------------------------------
var debug = process.env.NODE_ENV !== "production";
var webpack = require('webpack');

module.exports = {
  context: __dirname,
  devtool: debug ? "inline-sourcemap" : null,
  entry: "./js/scripts.js",
  output: {
    path: __dirname + "/js",
    filename: "scripts.min.js"
  },
  plugins: debug ? [] : [
    new webpack.optimize.DedupePlugin(),
    new webpack.optimize.OccurenceOrderPlugin(),
    new webpack.optimize.UglifyJsPlugin({ mangle: false, sourcemap: false }),
  ],
};



========================================
----------------------------------------
WebPack tutorials for Beginners
//PlayList from user2: https://www.youtube.com/watch?v=ytRnPV0kRN0&list=PL4cUxeGkcC9iTQ3J5oa6orDIMQKKxl8dC
----------------------------------------
========================================

*****************************************
Video 1 - webpack? and course files
*****************************************
Need to know JS, CSS/SASS, HTML
About: 
	how to use course files and tools that'll be used.
	what webpack is for and why it is good
.
GitHub: https://github.com/iamshaunjp/webpack-playlist
	lessons not ordered by folder organization.
	lessons are ordered by git branches! OMG!
Steps:
1. git clone. just explain at here.
2. install node/npm
	to install webpack
3. install atom text editor
	for helpful packages
4. atom packages
	ctrl+, aka install packages panel
	a. atom-live-server
		ctrl+shift+3 local server on port 3000
		ctrl+shift+4 local server on port 4000
		[3-5, 8, 9]
	b. platformio-ide-terminal
		to type terminal commands
5. step 1. actually did it here. 
	You are at "master branch"
6. cd webpack-playlist
7. git checkout lesson-1

----------------------------------------
webpack info
----------------------------------------
-bundles JS files into one, minimizing http requests
-process SASS/LESS filess into CSS and only use them where needed. 
-convert JSX or ES2015 into vanilla JS which browsers understand
	browsers cannot understand some/all JSX/ES2015 by default


*********************************************
Video 2 - installation and bundling JS files
*********************************************


----------------------------------------

----------------------------------------


	
----------------------------------------

----------------------------------------


	
----------------------------------------

----------------------------------------


	
----------------------------------------
webpack.config.js - user2's version
----------------------------------------
module.exports = {

    //define entry point
    entry: './src/script-1.js',

    //define output point
    output: {
        path: 'dist',
        filename: 'bundle.js'
    },

     module: {
        loaders: [
            {
                test: /\.js$/,
                exclude: /(node_modules)/,
                loader: 'babel-loader',
                query: {
                    presets: ['es2015']
                }
            },
            {
                test: /\.scss$/,
                loader: 'style-loader!css-loader!sass-loader'
            }
        ] //loaders
    } //module

};

	



	
====================================================================================
1. ReactJs JS Intro & Workspace Setup
====================================================================================


----------------------------------------

----------------------------------------


	
----------------------------------------

----------------------------------------


	
----------------------------------------

----------------------------------------


	



==========================================

==========================================




==========================================

==========================================




==========================================

==========================================




==========================================

==========================================




==========================================

==========================================




==========================================

==========================================




==========================================

==========================================




==========================================

==========================================




==========================================

==========================================
























